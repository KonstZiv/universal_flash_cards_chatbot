# Docker-compose configuration for development

version: '3.8'

x-common-spec: &common-spec
  env_file: .env

x-python-container-spec: &python-container-spec
  <<: *common-spec
  build:
    context: .
    dockerfile: Dockerfile
    target: dev
  environment:
    PYTHONUNBUFFERED: "1"
  volumes:
    - &py-code-volume "./app:/app"
  depends_on:
    - postgres
#    - redis
#    - mailhog


services:
  python:
    <<: *python-container-spec
    ports:
      - "${FASTAPI_PORT-8000}:8000"
    command: python3 src/main.py
#    entrypoint: wait-for-it.sh postgres:5432 -t 60 --

  postgres:
    image: postgres:12
    # Comment in the following lines to connect to your Dockerized instance of Postgres from your host machine.
    # Change the host port (before colon) if you have a local instance of Postgres running on that port.
    # ports:
    #     - "5432:5432"
    volumes:
      - "postgres:/var/lib/postgresql/data"
      - "./scripts/create-citext-extension.sql:/docker-entrypoint-initdb.d/create-citext-extension.sql"
    environment:
      # credentials taken from .env file
      POSTGRES_USER: "${POSTGRES_USER-bot}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD-bot}"


#  redis:
#    image: redis:4.0.10-alpine
#    sysctls:
#      # To allow maintaining TCP backlog setting that defaults to 511
#      net.core.somaxconn: 512
#
#  mailhog:
#    image: mailhog/mailhog:v1.0.0
#    ports:
#      - "${MAILHOG_PORT-8025}:8025"

volumes:
  postgres: {}

